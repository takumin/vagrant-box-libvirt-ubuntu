#!/bin/bash
# vim: set noet :

set -eu

################################################################################
# Default Variables
################################################################################

# Binary Architecture
# Value:
#   - amd64
#   - arm64
# shellcheck disable=SC2086
: ${ARCH:='amd64'}

# Release Codename
# Value:
#   - bionic
#   - focal
#   - jammy
# shellcheck disable=SC2086
: ${RELEASE:='jammy'}

# Kernel Package
# Values:
#   - virtual
#   - virtual-hwe
# shellcheck disable=SC2086
: ${KERNEL:='virtual'}

# User - Name
# Values: String
# shellcheck disable=SC2086
: ${USER_NAME:='vagrant'}

# User - Password
# Values: String
# shellcheck disable=SC2086
: ${USER_PASS:='vagrant'}

# User - Full Name
# Values: String
# shellcheck disable=SC2086
: ${USER_FULL:='Vagrant User'}

# User - SSH Public Key
# Values: String
# shellcheck disable=SC2086
: ${USER_KEYS:='ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key'}

# Apt Repository - Official
# Values: String
# shellcheck disable=SC2086
: ${MIRROR_UBUNTU:='http://archive.ubuntu.com/ubuntu'}

# Proxy - No Proxy List
# Values: String
# shellcheck disable=SC2086
: ${NO_PROXY:=''}

# Proxy - FTP Proxy
# Values: String
# shellcheck disable=SC2086
: ${FTP_PROXY:=''}

# Proxy - HTTP Proxy
# Values: String
# shellcheck disable=SC2086
: ${HTTP_PROXY:=''}

# Proxy - HTTPS Proxy
# Values: String
# shellcheck disable=SC2086
: ${HTTPS_PROXY:=''}

# Proxy - Apt Proxy Host
# Values: String
# shellcheck disable=SC2086
: ${APT_PROXY_HOST:=''}

# Proxy - Apt Proxy Port
# Values: String
# shellcheck disable=SC2086
: ${APT_PROXY_PORT:=''}

# Working Directory
# Values: String
# shellcheck disable=SC2086
: ${WORK_DIR:="/tmp/vagrant"}

################################################################################
# Available Environment
################################################################################

# Arch
declare -a AVAILABLE_ARCH=(
	'amd64'
	'arm64'
)

# Release
declare -a AVAILABLE_RELEASE=(
	'bionic'
	'focal'
	'jammy'
)

# Kernel
declare -a AVAILABLE_KERNEL=(
	'virtual'
	'virtual-hwe'
)

################################################################################
# Check Environment
################################################################################

# Array Util
containsElement () {
	local e match="$1"
	shift
	for e; do [[ "$e" == "$match" ]] && return 0; done
	return 1
}

# Arch
containsElement "${ARCH}" "${AVAILABLE_ARCH[@]}"
RETVAL=$?
if [ "${RETVAL}" != 0 ]; then
	echo "ARCH: ${AVAILABLE_ARCH[*]}"
	exit 1
fi

# Release
containsElement "${RELEASE}" "${AVAILABLE_RELEASE[@]}"
RETVAL=$?
if [ "${RETVAL}" != 0 ]; then
	echo "RELEASE: ${AVAILABLE_RELEASE[*]}"
	exit 1
fi

# Kernel
containsElement "${KERNEL}" "${AVAILABLE_KERNEL[@]}"
RETVAL=$?
if [ "${RETVAL}" != 0 ]; then
	echo "KERNEL: ${AVAILABLE_KERNEL[*]}"
	exit 1
fi

################################################################################
# Require Environment
################################################################################

# Tmpfs Root Filesystem Mount Point
TMPFS_DIR="${WORK_DIR}/root"

# Grub Bootloader Mount Point
GRUB_DIR="${WORK_DIR}/grub"

# Vagrant Box Build Directory
BUILD_DIR="${WORK_DIR}/box"

# Qemu Block Device Path
BLOCK_DEV="/dev/nbd0"

# Debootstrap Command
DEBOOTSTRAP_COMMAND="debootstrap"

# Debootstrap Architecture
DEBOOTSTRAP_COMMAND="${DEBOOTSTRAP_COMMAND} --arch=${ARCH}"

# Debootstrap Variant
DEBOOTSTRAP_COMMAND="${DEBOOTSTRAP_COMMAND} --variant=minbase"

# Debootstrap Components
DEBOOTSTRAP_COMMAND="${DEBOOTSTRAP_COMMAND} --components=main,restricted,universe,multiverse"

# Debootstrap Include Packages
DEBOOTSTRAP_COMMAND="${DEBOOTSTRAP_COMMAND} --include=tzdata,locales,console-setup,gnupg"

# Debootstrap Environment
declare -a DEBOOTSTRAP_ENVIRONMENT=()

# Check APT Proxy
if [ "x${APT_PROXY_HOST}" != "x" ] && [ "x${APT_PROXY_PORT}" != "x" ]; then
	# HTTP Proxy Environment
	DEBOOTSTRAP_ENVIRONMENT=("${DEBOOTSTRAP_ENVIRONMENT[*]}" "http_proxy=http://${APT_PROXY_HOST}:${APT_PROXY_PORT}")

	# HTTPS Proxy Environment
	DEBOOTSTRAP_ENVIRONMENT=("${DEBOOTSTRAP_ENVIRONMENT[*]}" "https_proxy=http://${APT_PROXY_HOST}:${APT_PROXY_PORT}")
fi

# Check Debootstrap Environment
if [ ${#DEBOOTSTRAP_ENVIRONMENT[*]} -gt 0 ]; then
	# Debootstrap Override Command
	DEBOOTSTRAP_COMMAND="env ${DEBOOTSTRAP_ENVIRONMENT[*]} ${DEBOOTSTRAP_COMMAND}"
fi

# Select Kernel Image Package
case "${RELEASE}-${KERNEL}" in
	"bionic-virtual"     ) KERNEL_IMAGE_PACKAGE="linux-image-virtual" ;;
	"focal-virtual"      ) KERNEL_IMAGE_PACKAGE="linux-image-virtual" ;;
	"jammy-virtual"      ) KERNEL_IMAGE_PACKAGE="linux-image-virtual" ;;
	"bionic-virtual-hwe" ) KERNEL_IMAGE_PACKAGE="linux-image-virtual-hwe-18.04" ;;
	"focal-virtual-hwe"  ) KERNEL_IMAGE_PACKAGE="linux-image-virtual-hwe-20.04" ;;
	"jammy-virtual-hwe"  ) KERNEL_IMAGE_PACKAGE="linux-image-virtual-hwe-22.04" ;;
esac

# User Password to SHA512 Hash
USER_PASS_HASH="$(echo "${USER_PASS}" | openssl passwd -stdin -6 -salt "$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | fold -w 8 | head -n 1)")"

################################################################################
# Initialize
################################################################################

# Load Kernel Module
lsmod | grep -qs nbd || modprobe nbd

# Install Required Packages
dpkg -l | awk '{print $2}' | grep -qs '^qemu$'        || apt-get -qq --no-install-recommends install qemu
dpkg -l | awk '{print $2}' | grep -qs '^gdisk$'       || apt-get -qq --no-install-recommends install gdisk
dpkg -l | awk '{print $2}' | grep -qs '^dosfstools$'  || apt-get -qq --no-install-recommends install dosfstools
dpkg -l | awk '{print $2}' | grep -qs '^e2fsprogs$'   || apt-get -qq --no-install-recommends install e2fsprogs
dpkg -l | awk '{print $2}' | grep -qs '^xfsprogs$'    || apt-get -qq --no-install-recommends install xfsprogs
dpkg -l | awk '{print $2}' | grep -qs '^pixz$'        || apt-get -qq --no-install-recommends install pixz
dpkg -l | awk '{print $2}' | grep -qs '^debootstrap$' || apt-get -qq --no-install-recommends install debootstrap

# Working Directory
mkdir -p "${WORK_DIR}"
mkdir -p "${TMPFS_DIR}"
mkdir -p "${GRUB_DIR}"
mkdir -p "${BUILD_DIR}"

################################################################################
# Cleanup
################################################################################

# Unmount Root Partition
awk '{print $2}' /proc/mounts | grep -s "${TMPFS_DIR}" | sort -r | xargs --no-run-if-empty umount
awk '{print $2}' /proc/mounts | grep -s "${GRUB_DIR}" | sort -r | xargs --no-run-if-empty umount

# Disconnect Disk Image
qemu-nbd -d "${BLOCK_DEV}" > /dev/null

################################################################################
# Disk
################################################################################

# Mount Root File System Partition
mount -t tmpfs -o 'mode=0755' tmpfs "${TMPFS_DIR}"

# Create Disk Image
qemu-img create -q -f qcow2 "${WORK_DIR}/box.img" 8G

# Connect Disk Image
qemu-nbd -c "${BLOCK_DEV}" "${WORK_DIR}/box.img"

# Clear Partition Table
sgdisk -Z "${BLOCK_DEV}"

# Create GPT Partition Table
sgdisk -o "${BLOCK_DEV}"

# Create BIOS Partition
sgdisk -a 1 -n 1::2047  -c 1:"Bios" -t 1:ef02 "${BLOCK_DEV}"

# Create EFI Partition
sgdisk      -n 2::+512M -c 2:"Efi"  -t 2:ef00 "${BLOCK_DEV}"

# Create Root Partition
sgdisk      -n 3::-1    -c 3:"Root" -t 3:8300 "${BLOCK_DEV}"

# Set Legacy BIOS Boot Flag
sgdisk -A 1:set:2 "${BLOCK_DEV}"

# Format EFI System Partition
mkfs.vfat -F 32 -n "ESP" "${BLOCK_DEV}p2"

# Format Root File System Partition
mkfs.xfs -L "Root" "${BLOCK_DEV}p3"

# Mount Partition
mount "${BLOCK_DEV}p3" "${GRUB_DIR}"

# Mount EFI System Partition
mkdir -p "${GRUB_DIR}/boot/efi"
mount "${BLOCK_DEV}p2" "${GRUB_DIR}/boot/efi"

# Sync Disk
sync;sync;sync

################################################################################
# Debootstrap
################################################################################

# Install Base System
${DEBOOTSTRAP_COMMAND} "${RELEASE}" "${TMPFS_DIR}" "${MIRROR_UBUNTU}"

# Require Environment
declare -x PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
declare -x HOME="/root"
declare -x LC_ALL="C"
declare -x LANGUAGE="C"
declare -x LANG="C"
declare -x DEBIAN_FRONTEND="noninteractive"
declare -x DEBIAN_PRIORITY="critical"
declare -x DEBCONF_NONINTERACTIVE_SEEN="true"

# Cleanup Files
find "${TMPFS_DIR}/dev"     -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr
find "${TMPFS_DIR}/proc"    -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr
find "${TMPFS_DIR}/run"     -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr
find "${TMPFS_DIR}/sys"     -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr
find "${TMPFS_DIR}/tmp"     -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr
find "${TMPFS_DIR}/var/tmp" -mindepth 1 -print0 | xargs -0 --no-run-if-empty rm -fr

# Require Mount
mount -t devtmpfs                   devtmpfs "${TMPFS_DIR}/dev"
mount -t devpts   -o gid=5,mode=620 devpts   "${TMPFS_DIR}/dev/pts"
mount -t proc                       proc     "${TMPFS_DIR}/proc"
mount -t tmpfs    -o mode=755       tmpfs    "${TMPFS_DIR}/run"
mount -t sysfs                      sysfs    "${TMPFS_DIR}/sys"
mount -t tmpfs                      tmpfs    "${TMPFS_DIR}/tmp"
mount -t tmpfs                      tmpfs    "${TMPFS_DIR}/var/tmp"
chmod 1777 "${TMPFS_DIR}/dev/shm"

################################################################################
# Workaround
################################################################################

# Apt Speed Up
echo 'force-unsafe-io' > "${TMPFS_DIR}/etc/dpkg/dpkg.cfg.d/02apt-speedup"

################################################################################
# System
################################################################################

# Default Hostname
echo 'vagrant' > "${TMPFS_DIR}/etc/hostname"

# Create FsTab
cat > "${TMPFS_DIR}/etc/fstab" << __EOF__
UUID=$(blkid -p -o value -s UUID ${BLOCK_DEV}p3) / xfs defaults 0 0
UUID=$(blkid -p -o value -s UUID ${BLOCK_DEV}p2) /boot/efi vfat defaults 0 0
tmpfs /tmp tmpfs defaults 0 0
__EOF__

################################################################################
# Repository
################################################################################

# Official Repository
cat > "${TMPFS_DIR}/etc/apt/sources.list" << __EOF__
# Official Repository
deb ${MIRROR_UBUNTU} ${RELEASE}           main restricted universe multiverse
deb ${MIRROR_UBUNTU} ${RELEASE}-updates   main restricted universe multiverse
deb ${MIRROR_UBUNTU} ${RELEASE}-backports main restricted universe multiverse
deb ${MIRROR_UBUNTU} ${RELEASE}-security  main restricted universe multiverse
__EOF__

################################################################################
# Upgrade
################################################################################

# Update Repository
chroot "${TMPFS_DIR}" apt-get -qq update

# Upgrade System
chroot "${TMPFS_DIR}" apt-get -qq dist-upgrade

################################################################################
# Kernel
################################################################################

# Install Kernel
chroot "${TMPFS_DIR}" apt-get -qq --no-install-recommends install "${KERNEL_IMAGE_PACKAGE}"

# Get Kernel Version
KERNEL_VERSION="$(chroot "${TMPFS_DIR}" dpkg -l | awk '{print $2}' | grep -E 'linux-image-[0-9\.-]+' | sed -E 's/linux-image-//')"

################################################################################
# Minimal
################################################################################

# Minimal Package
chroot "${TMPFS_DIR}" apt-get -qq install ubuntu-minimal

################################################################################
# Standard
################################################################################

# Standard Package
chroot "${TMPFS_DIR}" apt-get -qq install ubuntu-standard

################################################################################
# File System
################################################################################

# XFS Package
chroot "${TMPFS_DIR}" apt-get -qq install xfsprogs

################################################################################
# Cloud-Init
################################################################################

# Cloud-Init Datasources
chroot "${TMPFS_DIR}" sh -c "echo 'cloud-init cloud-init/datasources multiselect NoCloud, None' | debconf-set-selections"

# Cloud-Init Package
chroot "${TMPFS_DIR}" apt-get -qq install cloud-init

################################################################################
# Admin User
################################################################################

# System Group
chroot "${TMPFS_DIR}" addgroup --system admin
chroot "${TMPFS_DIR}" addgroup --system lpadmin
chroot "${TMPFS_DIR}" addgroup --system lxd
chroot "${TMPFS_DIR}" addgroup --system sambashare
chroot "${TMPFS_DIR}" addgroup --system netdev

# Override Cloud-Init Default User
cat > "${TMPFS_DIR}/etc/cloud/cloud.cfg.d/99_default_user.cfg" << __EOF__
system_info:
  default_user:
    name: '${USER_NAME}'
    gecos: '${USER_FULL}'
    groups:
    - 'adm'
    - 'admin'
    - 'audio'
    - 'cdrom'
    - 'dialout'
    - 'dip'
    - 'floppy'
    - 'lpadmin'
    - 'lxd'
    - 'netdev'
    - 'plugdev'
    - 'sambashare'
    - 'staff'
    - 'sudo'
    - 'users'
    - 'video'
    lock_passwd: False
    passwd: '${USER_PASS_HASH}'
    sudo:
    - 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
    - '${USER_KEYS}'
    shell: '/bin/bash'
__EOF__

################################################################################
# Network
################################################################################

# Install Package
chroot "${TMPFS_DIR}" apt-get -qq install nplan

# Enabled Systemd Networkd
chroot "${TMPFS_DIR}" systemctl enable systemd-networkd.service

################################################################################
# SSH
################################################################################

# Require Package
chroot "${TMPFS_DIR}" apt-get -qq install ssh

# Disable DNS Lookup
sed -i -e 's@^#?UseDNS.*$@UseDNS no@' "${TMPFS_DIR}/etc/ssh/sshd_config"

# Enable Root Login
sed -i -e 's@^#?PermitRootLogin.*$@PermitRootLogin without-password@' "${TMPFS_DIR}/etc/ssh/sshd_config"

# Enable Password Login
sed -i -e 's@^#?PasswordAuthentication.*$@PasswordAuthentication yes@' "${TMPFS_DIR}/etc/ssh/sshd_config"

# Enable Password Login (Cloud-Init)
echo 'ssh_pwauth: True' > "${TMPFS_DIR}/etc/cloud/cloud.cfg.d/99_ssh_pwauth.cfg"

# Remove Temporary SSH Host Keys
find "${TMPFS_DIR}/etc/ssh" -type f -name '*_host_*' -exec rm {} \;

################################################################################
# Rsync
################################################################################

# Require Package
chroot "${TMPFS_DIR}" apt-get -qq install rsync

################################################################################
# NFS
################################################################################

# Require Package
chroot "${TMPFS_DIR}" apt-get -qq install nfs-common nfs4-acl-tools

################################################################################
# Boot
################################################################################

# Require Package
chroot "${TMPFS_DIR}" apt-get -qq install grub2-common grub-pc-bin grub-efi-amd64-bin

################################################################################
# Initramfs
################################################################################

# Require Package
chroot "${TMPFS_DIR}" apt-get -qq install initramfs-tools

# Cleanup Initramfs
chroot "${TMPFS_DIR}" update-initramfs -d -k all

# Create Initramfs
chroot "${TMPFS_DIR}" update-initramfs -c -k "${KERNEL_VERSION}"

################################################################################
# Cleanup
################################################################################

# Official Repository
cat > "${TMPFS_DIR}/etc/apt/sources.list" << __EOF__
# Official Repository
deb http://archive.ubuntu.com/ubuntu ${RELEASE}           main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu ${RELEASE}-updates   main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu ${RELEASE}-backports main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu ${RELEASE}-security  main restricted universe multiverse
__EOF__

# Default Hostname
echo 'localhost.localdomain' > "${TMPFS_DIR}/etc/hostname"
echo '127.0.1.1	localhost.localdomain localhost' >> "${TMPFS_DIR}/etc/hosts"

# Kernel&Initramfs Old Symbolic Link
rm -f "${TMPFS_DIR}/vmlinuz.old"
rm -f "${TMPFS_DIR}/initrd.img.old"
rm -f "${TMPFS_DIR}/boot/vmlinuz.old"
rm -f "${TMPFS_DIR}/boot/initrd.img.old"

# Out Of Packages
chroot "${TMPFS_DIR}" apt-get -qq autoremove --purge

# Package Archive
chroot "${TMPFS_DIR}" apt-get -qq clean

# Persistent Machine ID
echo -n '' > "${TMPFS_DIR}/etc/machine-id"
ln -fs "/etc/machine-id" "${TMPFS_DIR}/var/lib/dbus/machine-id"

# Journal Log Directory
if [ -d "${TMPFS_DIR}/var/log/journal" ]; then
	rmdir "${TMPFS_DIR}/var/log/journal"
fi

# Repository List
find "${TMPFS_DIR}/var/lib/apt/lists" -type f -print0 | xargs -0 rm -f
touch "${TMPFS_DIR}/var/lib/apt/lists/lock"
chmod 0640 "${TMPFS_DIR}/var/lib/apt/lists/lock"

# Remote Apt Speed Up
rm -f "${TMPFS_DIR}/etc/dpkg/dpkg.cfg.d/02apt-speedup"

################################################################################
# Archive
################################################################################

# Unmount Partition
awk '{print $2}' /proc/mounts | grep -s "${TMPFS_DIR}/" | sort -r | xargs --no-run-if-empty umount

# Copy RootFs Files
tar --acls --xattrs --one-file-system -cpf - -C "${TMPFS_DIR}" . | tar --acls --xattrs -xpf - -C "${GRUB_DIR}"

# Mount Partition
mount -t devtmpfs                   devtmpfs "${GRUB_DIR}/dev"
mount -t devpts   -o gid=5,mode=620 devpts   "${GRUB_DIR}/dev/pts"
mount -t proc                       proc     "${GRUB_DIR}/proc"
mount -t tmpfs    -o mode=755       tmpfs    "${GRUB_DIR}/run"
mount -t sysfs                      sysfs    "${GRUB_DIR}/sys"
mount -t tmpfs                      tmpfs    "${GRUB_DIR}/tmp"
mount -t tmpfs                      tmpfs    "${GRUB_DIR}/var/tmp"
chmod 1777 "${GRUB_DIR}/dev/shm"

# Check Architecture
if [ "${ARCH}" = 'amd64' ]; then
	# Install BIOS Boot Recode
	chroot "${GRUB_DIR}" grub-install --target=i386-pc --recheck "${BLOCK_DEV}"

	# Install UEFI Boot Recode
	chroot "${GRUB_DIR}" grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --recheck
fi

# Disable OS Prober
echo '' >> "${GRUB_DIR}/etc/default/grub"
echo '# Disable OS Prober' >> "${GRUB_DIR}/etc/default/grub"
echo 'GRUB_DISABLE_OS_PROBER="true"' >> "${GRUB_DIR}/etc/default/grub"

# Create Grub Config File
chroot "${GRUB_DIR}" grub-mkconfig -o /boot/grub/grub.cfg

# Unmount Partition
awk '{print $2}' /proc/mounts | grep -s "${TMPFS_DIR}" | sort -r | xargs --no-run-if-empty umount
awk '{print $2}' /proc/mounts | grep -s "${GRUB_DIR}" | sort -r | xargs --no-run-if-empty umount

# Disconnect Disk Image
qemu-nbd -d "${BLOCK_DEV}" > /dev/null

# Compressed Disk Image
qemu-img convert -c -f qcow2 -O qcow2 "${WORK_DIR}/box.img" "${BUILD_DIR}/box.img"

################################################################################
# Vagrant Boxes
################################################################################

# Create Vagrant Configuration File
cat > "${BUILD_DIR}/Vagrantfile" << '__EOF__'
Vagrant.configure("2") do |config|
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
  end
end
__EOF__

# Create Vagrant Metadata File
cat > "${BUILD_DIR}/metadata.json" << '__EOF__'
{
  "provider": "libvirt",
  "format": "qcow2",
  "virtual_size": 8
}
__EOF__

# Create Vagrant Boxes
tar -cvf "ubuntu-${ARCH}-${RELEASE}-libvirt.box" -C "${BUILD_DIR}" -I pixz .

# Create SHA256 Checksum
sha256sum "ubuntu-${ARCH}-${RELEASE}-libvirt.box" > "ubuntu-${ARCH}-${RELEASE}-libvirt.box.sha256"

# Check Sudoers
if [ -n "${SUDO_UID}" ] && [ -n "${SUDO_GID}" ]; then
	# Permission Vagrant Boxes
	chown "${SUDO_UID}:${SUDO_GID}" "ubuntu-${ARCH}-${RELEASE}-libvirt.box"
	chown "${SUDO_UID}:${SUDO_GID}" "ubuntu-${ARCH}-${RELEASE}-libvirt.box.sha256"
fi

################################################################################
# Infomation
################################################################################

# Vagrant Boxes
echo '#'
echo '# Vagrant Box Status'
echo '#'
ls -lah "ubuntu-${ARCH}-${RELEASE}-libvirt.box"
ls -lah "ubuntu-${ARCH}-${RELEASE}-libvirt.box.sha256"
